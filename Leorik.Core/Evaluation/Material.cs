using System.Runtime.CompilerServices;

namespace Leorik.Core
{
    public struct Material
    {
        public short Base;
        public short Endgame;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddScore(int pieceIndex, int squareIndex)
        {
            int tableIndex = (pieceIndex << 6) | squareIndex;
            Base += MidgameTables[tableIndex];
            Endgame += EndgameTables[tableIndex];
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SubtractScore(int pieceIndex, int squareIndex)
        {
            int tableIndex = (pieceIndex << 6) | squareIndex;
            Base -= MidgameTables[tableIndex];
            Endgame -= EndgameTables[tableIndex];
        }

        public static readonly short[] MidgameTables = new short[6 * 64]{
  100,  100,  100,  100,  100,  100,  100,  100,
  149,  194,  129,  162,  150,  184,  116,   69,
   72,   74,  107,  108,  145,  150,  102,   75,
   58,   77,   79,   96,   98,   91,   90,   64,
   46,   55,   65,   80,   85,   78,   77,   57,
   41,   45,   58,   50,   62,   69,   89,   62,
   36,   52,   51,   49,   55,   98,   96,   62,
  100,  100,  100,  100,  100,  100,  100,  100,

  150,  242,  258,  265,  303,  233,  267,  197,
  243,  263,  382,  333,  325,  367,  297,  286,
  275,  374,  359,  386,  408,  421,  391,  342,
  303,  341,  341,  379,  363,  396,  344,  339,
  309,  322,  338,  336,  351,  345,  339,  314,
  299,  313,  336,  333,  342,  342,  348,  306,
  286,  257,  311,  319,  322,  337,  298,  311,
  227,  301,  258,  280,  302,  294,  305,  276,

  296,  314,  263,  260,  294,  278,  302,  296,
  317,  362,  335,  314,  361,  372,  356,  306,
  338,  375,  389,  390,  378,  396,  382,  353,
  348,  363,  374,  405,  392,  389,  365,  351,
  343,  371,  369,  377,  390,  368,  361,  349,
  350,  367,  367,  370,  367,  382,  371,  359,
  346,  368,  367,  355,  364,  371,  386,  350,
  301,  344,  342,  332,  339,  344,  302,  320,

  484,  507,  476,  521,  516,  488,  487,  486,
  484,  484,  513,  521,  533,  541,  490,  508,
  446,  468,  481,  484,  473,  506,  518,  477,
  422,  436,  454,  480,  474,  485,  459,  446,
  404,  416,  434,  440,  449,  445,  470,  428,
  396,  421,  430,  425,  448,  448,  454,  421,
  393,  429,  422,  433,  444,  454,  444,  379,
  420,  429,  443,  451,  455,  440,  420,  424,

  861,  896,  922,  902,  952,  940,  920,  928,
  893,  869,  905,  918,  911,  958,  928,  950,
  902,  901,  923,  923,  946,  975,  959,  971,
  879,  886,  901,  900,  914,  932,  915,  914,
  903,  885,  904,  901,  908,  913,  917,  913,
  891,  917,  901,  910,  906,  914,  928,  913,
  876,  900,  925,  913,  920,  928,  910,  910,
  906,  892,  902,  922,  894,  887,  889,  865,

  -42,    1,   -2,   -6,  -14,   -7,    8,   -3,
    4,   23,   16,   30,   12,   13,    3,  -10,
   12,   28,   35,    8,   17,   42,   50,   -5,
   -1,    5,   11,   -3,  -11,  -10,    1,  -42,
  -25,   14,  -14,  -64,  -66,  -38,  -45,  -63,
   -4,   17,   -8,  -37,  -47,  -35,    2,  -14,
   20,   36,    4,  -56,  -34,   -1,   41,   49,
   12,   71,   39,  -46,   25,  -14,   60,   55,
    };

        public static short[] EndgameTables = new short[6 * 64]{
    0,    0,    0,    0,    0,    0,    0,    0,
   28,  -21,   50,    1,   16,  -40,   45,  108,
   59,   65,   18,    5,  -49,  -57,   11,   38,
   26,    2,   -1,  -26,  -27,  -21,  -19,    5,
   23,   16,    5,  -10,  -15,  -13,  -18,    1,
   22,   22,   11,   33,   19,    2,  -37,  -10,
   40,   18,   36,   40,   38,  -25,  -41,   -7,
    0,    0,    0,    0,    0,    0,    0,    0,

   66,  -12,    4,  -22,  -47,    8,  -41,  -15,
    6,    3, -137,  -59,  -59, -120,  -45,  -57,
  -30, -123,  -79, -109, -148, -157, -139, -106,
  -48,  -70,  -50,  -94,  -74, -120,  -69,  -85,
  -54,  -56,  -51,  -42,  -65,  -61,  -64,  -59,
  -52,  -46,  -70,  -49,  -63,  -74,  -98,  -60,
  -49,    1,  -51,  -54,  -54,  -82,  -45,  -86,
   12,  -89,   -4,  -21,  -52,  -41,  -89,  -50,

   -9,  -35,   21,   33,   -4,   12,  -17,  -19,
  -31,  -78,  -41,  -29,  -73,  -89,  -69,  -22,
  -51,  -95, -105, -106,  -93, -109,  -98,  -65,
  -65,  -70,  -80, -113,  -95,  -98,  -80,  -65,
  -61,  -85,  -69,  -71, -100,  -74,  -82,  -65,
  -71,  -80,  -72,  -75,  -69,  -98,  -91,  -84,
  -68, -101,  -88,  -70,  -78,  -95, -119,  -88,
  -25,  -61,  -81,  -50,  -61,  -77,  -13,  -40,

   32,    3,   48,   -8,   -2,   24,   22,   25,
   28,   30,   -3,  -13,  -41,  -44,   20,   -5,
   68,   46,   29,   26,   35,  -11,  -24,   21,
   94,   78,   65,   26,   33,   19,   39,   63,
  115,  103,   84,   75,   58,   58,   24,   73,
  116,   92,   76,   87,   53,   49,   41,   78,
  118,   76,   91,   80,   56,   43,   52,  132,
   86,   86,   72,   63,   53,   66,   93,   63,

   48,   34,    7,   45,  -21,   -9,  -10,   -6,
    3,   66,   39,   35,   54,  -21,   11,  -27,
  -10,   11,   -9,   31,   15,  -37,  -28,  -58,
   41,   50,   32,   60,   63,   20,   60,   44,
  -11,   57,   31,   63,   40,   33,   26,   26,
   18,  -40,   32,   10,   23,   15,  -10,   10,
   19,   -8,  -49,  -16,  -21,  -42,  -40,  -41,
  -26,  -13,  -13,  -66,   15,  -13,    3,    8,

  -35,  -32,  -29,  -16,    1,    9,   -3,   -6,
  -17,  -17,   -6,  -21,   -1,   15,   19,   19,
   -7,  -19,  -23,   -1,   -8,  -10,  -16,   11,
  -13,    6,    8,   24,   32,   39,   22,   45,
    4,  -22,   35,   97,  101,   66,   61,   61,
  -15,  -22,   19,   61,   77,   59,    6,    7,
  -49,  -50,    3,   76,   53,    9,  -50,  -76,
  -66, -120,  -67,   40,  -59,    4,  -96, -116,
        };
    }
}
